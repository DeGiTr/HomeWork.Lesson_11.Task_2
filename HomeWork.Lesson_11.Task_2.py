"""
Задание №2

В Урок №10. Задание №1 вы создавали словарь с информацией о питомце. Теперь нам нужна "настоящая" база данных для ветеринарной клиники.

"""
import collections

def get_suffix(age): # Функция для склонения "год"
    if age % 10 == 1 and age % 100 != 11:
        return "год"
    elif 2 <= age % 10 <= 4 and (age % 100 < 10 or age % 100 >= 20):
        return "года"
    else:
        return "лет"


def create():  # Данная функция будет создавать новую запись с информацией о питомце и добавлять эту информацию в наш словарь pets
    if pets:
        last = list(pets.keys())[-1]
    else:
        last = 0
    new_id = last + 1

    pet_name = input("Введите имя питомца: ")
    pet_type = input("Введите вид питомца: ")
    pet_age = int(input("Введите возраст питомца: "))
    owner_name = input("Введите имя владельца: ")

    pets[new_id] = {pet_name: {"Вид питомца": pet_type, "Возраст питомца": pet_age, "Имя владельца": owner_name}}
    print(f"Питомец {pet_name} успешно добавлен с ID {new_id}.")


def read(): # Данная функция будет отображать информацию о запрашиваемом питомце в виде: Это желторотый питон по кличке "Каа". Возраст питомца: 19 лет. Имя владельца: Саша
    for name in pets.keys():
        pet = pets[name]
    
        print(f'Это {pet["Вид питомца"]} по кличке "{name}". Возраст питомца: {pet["Возраст питомца"]} {age}. Имя владельца: {pet["Имя владельца"]}')


def get_pet(ID): # Функция, с помощью которой вы получите информацию о питомце в виде словаря
    """Возвращает информацию о питомце по ID или False, если питомец не найден."""
    return pets[ID] if ID in pets else False


def pets_list(): # Эта функция создана для удобства отображения всего списка питомцев
    for ID, pet_data in pets.items():
        for pet_name, pet_info in pet_data.items():
            age_str = get_suffix(pet_info["Возраст питомца"])
            print(f'ID: {ID}, {pet_info["Вид питомца"]} по кличке "{pet_name}". Возраст: {pet_info["Возраст питомца"]} {age_str}. Владелец: {pet_info["Имя владельца"]}')


def read(): # Функция для отображения информацию о питомце по ID
    """Отображает информацию о питомце по ID."""
    pet_id = int(input("Введите ID питомца: "))
    pet = get_pet(pet_id)
    if pet:
        for pet_name, pet_info in pet.items():
            age_str = get_suffix(pet_info["Возраст питомца"])
            print(f'Это {pet_info["Вид питомца"]} по кличке "{pet_name}". Возраст питомца: {pet_info["Возраст питомца"]} {age_str}. Имя владельца: {pet_info["Имя владельца"]}')
    else:
        print("Питомца с таким ID не существует.")

def update(): # Данная функция будет обновлять информацию об указанном питомце
    pet_id = int(input("Введите ID питомца, которого хотите обновить: "))
    pet = get_pet(pet_id)
    if pet:
        for pet_name, pet_info in pet.items():
            print(f"Текущая информация о питомце: {pet_name} ({pet_info['Вид питомца']}, {pet_info['Возраст питомца']} лет, владелец: {pet_info['Имя владельца']})")
            new_type = input(f"Введите новый вид питомца (оставьте пустым, чтобы не менять): ")
            new_age = input(f"Введите новый возраст питомца (оставьте пустым, чтобы не менять): ")
            new_owner = input(f"Введите новое имя владельца (оставьте пустым, чтобы не менять): ")

            if new_type:
                pet_info["Вид питомца"] = new_type
            if new_age:
                pet_info["Возраст питомца"] = int(new_age)
            if new_owner:
                pet_info["Имя владельца"] = new_owner

            print("Информация о питомце успешно обновлена.")
    else:
        print("Питомца с таким ID не существует.")

def delete(): # Данная функция будет удалять запись о существующем питомце по ID
    pet_id = int(input("Введите ID питомца, которого хотите удалить: "))
    pet = get_pet(pet_id)
    if pet:
        del pets[pet_id]
        print("Запись о питомце успешно удалена.")
    else:
        print("Питомца с таким ID не существует.")


# Можно создать пустой словарь, но для примера решил оставить двух кандидатов
pets = { 
    1: {
        "Мухтар": {
            "Вид питомца": "Собака",
            "Возраст питомца": 9,
            "Имя владельца": "Павел"
        },
    },
    2: {
        "Каа": {
            "Вид питомца": "желторотый питон",
            "Возраст питомца": 19,
            "Имя владельца": "Саша"
        },
    },
}

# Основной цикл программы
# Программа будет работать с помощью цикла while с условием command != 'stop', то есть до тех пор, пока на предложение ввести команду, пользователь не введёт слово stop
# Перед взаимодействием с "базой данных" запрашивается одна из команд в качестве пользовательского ввода. Пусть это будет переменная command

command = ""
while command != "stop":
    command = input("Введите команду (create, read, update, delete, list, stop): ")

    if command == "create":
        create()
    elif command == "read":
        read()
    elif command == "update":
        update()
    elif command == "delete":
        delete()
    elif command == "list":
        pets_list()
    elif command == "stop":
        print("Выход из программы.")
    else:
        print("Неверная команда. Пожалуйста, введите одну из доступных команд.")